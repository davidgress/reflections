Lesson 3

Reflect 5
What happens when you initialize a repository? Why do you need to do it?
adds .git folder. Tells git to manage project.

Reflect 8
How is the staging area different from the working directory and the repository? 
What value do you think it offers?

The contents can be different. All files in working directory but they have to be 
manually added to the staging area.
How to write a commit message
You're about to make your first commit to your reflections repository. When you do this, 
you'll need to write a commit message describing your changes. If you followed the
 instructions in the "Setting Up Your Workspace" video for your platform near the 
 end of Lesson 1, the editor you chose will appear as soon as you run git commit 
 and allow you to write a commit message. If you get an error message, you should 
 try revisiting the instructions in Lesson 1 and make sure your text editor is set 
 up properly.

You can also specify a commit message via the command line by running 
git commit -m "Commit message" instead of just git commit. 
It's still a good idea to get an editor set up, since this will make it 
easier to write long commit messages that fully describe the change.

Commit message style
While commit message style varies from person to person, this style guide 
describes some common best practices when writing commit messages.

Reflect 12
How can you use the staging area to make sure you have one commit per logical change?
Monitor the staging area. 
git diff --staged

Reflect 16
What are some situations when branches would be helpful in keeping your history organized? 
How would branches help?
You can create a branch that was a finished product or production code. 
You can create a backup using a branch.
You can create a new product using a branch.
Context switching.
Master is production quality. It always works.
Unique feature branch.
Public or self collaboration.

Viewing the commit history
The full command Caroline types to see the visual representation of the commit history is 
git log --graph --oneline master coins.

Checking out the coins branch
Note that you'll need to check out the coins branch using the command git checkout coins before you can 
view the coins branch using git log.

Reflect 21 : Visualizing with Diagrams
Now that youâ€™ve had some experience creating branches and drawing diagrams of your history, 
go add the following question and your thoughts on it to your reflections file:

How do the diagrams help you visualize the branch structure?
They make it clearer.
